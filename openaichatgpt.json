{
    "appid": "0d2d6df5-44a9-478a-b76b-3f8853ae14ca",
    "name": "OpenAI API ChatGPT for SOAR",
    "description": "Connect SOAR to ChatGPT for Chat, Completions, Edits, Moderations, and Embeddings",
    "type": "information",
    "product_vendor": "OpenAI",
    "logo": "openaichatgptapi.png",
    "logo_dark": "openaichatgptapi_dark.svg",
    "product_name": "ChatGPT",
    "python_version": "3",
    "product_version_regex": ".*",
    "publisher": "Splunkable, LLC",
    "license": "Copyright (c) 2023 Splunkable, LLC",
    "app_version": "1.0.0",
    "utctime_updated": "2023-06-26T18:25:54.910553Z",
    "package_name": "phantom_openaiapichatgptforsoar",
    "main_module": "openaichatgptapi_connector.py",
    "min_phantom_version": "5.3.3.92213",
    "app_wizard_version": "1.0.0",
    "configuration": {
        "Organization ID": {
            "description": "Your OpenAI API Org ID",
            "data_type": "string",
            "required": true,
            "order": 0
        },
        "API Key": {
            "description": "Your OpenAI API Key",
            "data_type": "password",
            "required": true,
            "order": 1
        }
    },
    "actions": [
        {
            "action": "test connectivity",
            "identifier": "test_connectivity",
            "description": "Validate the asset configuration for connectivity using supplied configuration",
            "verbose": "",
            "type": "test",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "get moderation",
            "identifier": "get_moderation",
            "description": "Check a string for sentiment.",
            "verbose": "The Moderation models are designed to check whether content complies with OpenAI's usage policies. The models provide classification capabilities that look for content in the following categories: hate, hate/threatening, self-harm, sexual, sexual/minors, violence, and violence/graphic. You can find out more in the moderation guide -> https://platform.openai.com/docs/guides/moderation/overview",
            "type": "investigate",
            "read_only": true,
            "parameters": {
                "input": {
                    "description": "String to be checked for sentiment.",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "model": {
                    "description": "Moderation model, all lower case, found here: https://platform.openai.com/docs/models/moderation",
                    "data_type": "string",
                    "required": true,
                    "default": "text-moderation-latest",
                    "order": 1
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 2
                },
                {
                    "data_path": "action_result.parameter.input",
                    "data_type": "string",
                    "column_name": "Input",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.parameter.model",
                    "data_type": "string",
                    "column_name": "Model",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric"
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric"
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        },
        {
            "action": "get embeddings",
            "identifier": "get_embeddings",
            "description": "Creates an embedding vector representing the input text.",
            "verbose": "Creates an embedding vector representing the input text. https://platform.openai.com/docs/api-reference/embeddings",
            "type": "investigate",
            "read_only": true,
            "parameters": {
                "input": {
                    "description": "Input string to vectorize",
                    "data_type": "string",
                    "required": true,
                    "order": 0
                },
                "model": {
                    "description": "OpenAI Model to Use",
                    "data_type": "string",
                    "required": true,
                    "default": "text-embedding-ada-002",
                    "order": 1
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 2
                },
                {
                    "data_path": "action_result.parameter.input",
                    "data_type": "string",
                    "column_name": "Input",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.parameter.model",
                    "data_type": "string",
                    "column_name": "Model",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric"
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric"
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        },
        {
            "action": "get chat completion",
            "identifier": "get_chat_completion",
            "description": "Query ChatGPT for additional context",
            "type": "investigate",
            "read_only": true,
            "parameters": {
                "system_input": {
                    "description": "Instructions for how ChatGPT should respond.",
                    "data_type": "string",
                    "required": true,
                    "default": "You are a helpful assistant.",
                    "order": 0
                },
                "user_input": {
                    "description": "Prompt for ChatGPT to respond to",
                    "data_type": "string",
                    "required": true,
                    "default": "Thanks for being so awesome ChatGPT!",
                    "order": 1
                },
                "model": {
                    "description": "ChatGPT Model",
                    "data_type": "string",
                    "required": true,
                    "default": "gpt-3.5-turbo",
                    "order": 2
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 3
                },
                {
                    "data_path": "action_result.parameter.model",
                    "data_type": "string",
                    "column_name": "Model",
                    "column_order": 2
                },
                {
                    "data_path": "action_result.parameter.system_input",
                    "data_type": "string",
                    "column_name": "System Input",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.parameter.user_input",
                    "data_type": "string",
                    "column_name": "User Input",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric"
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric"
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        },
        {
            "action": "get edits",
            "identifier": "get_edits",
            "description": "Pass inputs to OpenAI Edit Models",
            "type": "investigate",
            "read_only": true,
            "parameters": {
                "model": {
                    "description": "OpenAI Edit Model to be used",
                    "data_type": "string",
                    "required": true,
                    "default": "text-davinci-edit-001",
                    "order": 0
                },
                "input": {
                    "description": "The input string to be editing",
                    "data_type": "string",
                    "required": true,
                    "default": "PhillyDelphia",
                    "order": 1
                },
                "instructions": {
                    "description": "The edit instructions for input",
                    "data_type": "string",
                    "required": true,
                    "default": "Please fix the spelling mistakes in this US city.",
                    "order": 2
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 3
                },
                {
                    "data_path": "action_result.parameter.input",
                    "data_type": "string",
                    "column_name": "Input",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.instructions",
                    "data_type": "string",
                    "column_name": "Instructions",
                    "column_order": 2
                },
                {
                    "data_path": "action_result.parameter.model",
                    "data_type": "string",
                    "column_name": "Model",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric"
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric"
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        },
        {
            "action": "get completion",
            "identifier": "get_completion",
            "description": "Creates a completion for the provided prompt and parameters.",
            "verbose": "Creates a completion for the provided prompt and parameters.",
            "type": "investigate",
            "read_only": true,
            "parameters": {
                "model": {
                    "description": "Completion model to be used",
                    "data_type": "string",
                    "required": true,
                    "default": "text-davinci-003",
                    "order": 0
                },
                "input": {
                    "description": "Prompt for the Completion model",
                    "data_type": "string",
                    "required": true,
                    "default": "What is 2 + 2?",
                    "order": 1
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_name": "Status",
                    "column_order": 2
                },
                {
                    "data_path": "action_result.parameter.input",
                    "data_type": "string",
                    "column_name": "Input",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.parameter.model",
                    "data_type": "string",
                    "column_name": "Model",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric"
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric"
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        }
    ],
    "pip3_dependencies": {
        "pypi": [
            {
                "module": "openai"
            },
            {
                "module": "numpy"
            }
        ]
    }
}